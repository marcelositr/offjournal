# .github/workflows/python-app.yml

# Nome do nosso workflow. Aparecerá na aba "Actions" do GitHub.
name: Testes do Projeto Python

# Define os gatilhos: quando este robô deve rodar?
on:
  # Roda sempre que houver um push para a branch 'main'
  push:
    branches: [ "main" ]
  # Roda também quando um Pull Request for aberto para a branch 'main'
  pull_request:
    branches: [ "main" ]

# Define os "trabalhos" (jobs) que o robô vai executar.
jobs:
  # Nomeamos nosso job de "build". Poderia ser "testar", "verificar", etc.
  build:
    # Define o sistema operacional da máquina virtual que o GitHub vai nos dar.
    # 'ubuntu-latest' é perfeito para nosso projeto Linux.
    runs-on: ubuntu-22.04

    # Define a sequência de passos que o job vai executar.
    steps:
      # 1. Baixar o código do seu repositório para a máquina virtual.
      # Usa uma "Action" pré-feita pela comunidade.
      - name: Checkout do repositório
        uses: actions/checkout@v4

      # 2. Configurar o ambiente Python na máquina virtual.
      - name: Configurar Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3. Instalar as dependências do sistema (MUITO IMPORTANTE para a GUI!).
      # Sem isso, os testes que importam GTK ou WebKit falhariam.
      - name: Instalar dependências do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-3.0 gir1.2-webkit2-4.0

      # 4. Instalar as dependências Python (se houver alguma no futuro).
      # É uma boa prática manter este passo.
      - name: Instalar dependências Python
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 5. O passo mais importante: rodar os testes!
      # Exatamente o mesmo comando que usamos localmente.
      - name: Rodar os testes com unittest
        run: |
          python3 -m unittest discover tests
